diff -u a/ext/splash2x/apps/radiosity/src/radiosity.H b/ext/splash2x/apps/radiosity/src/radiosity.H
--- a/ext/splash2x/apps/radiosity/src/radiosity.H
+++ b/ext/splash2x/apps/radiosity/src/radiosity.H
@@ -29,6 +29,17 @@
 #include "glib.h"
 #include "pslib.h"
 
+#define METRIC 1
+#define REPORT_PIPE 0
+#define MAX_THREADS 256
+#define PIPE_NAME                 "/tmp/progress_manual.pipe"
+
+#ifdef METRIC
+extern int max_thread_id;
+extern __thread int current_thread_id;
+extern __thread int thread_init;
+extern ulong throughput[MAX_THREADS];
+#endif
 
 /****************************************
 *
diff -u a/ext/splash2x/apps/radiosity/src/rad_main.C b/ext/splash2x/apps/radiosity/src/rad_main.C
--- a/ext/splash2x/apps/radiosity/src/rad_main.C
+++ b/ext/splash2x/apps/radiosity/src/rad_main.C
@@ -41,6 +41,72 @@
 include(radiosity.h)
 
 
+#include <sys/syscall.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+
+#define PIPE_NAME                 "/tmp/progress_manual.pipe"
+
+#ifdef METRIC
+int max_thread_id = 0;
+__thread int current_thread_id = 0;
+__thread int thread_init = 0;
+ulong throughput[MAX_THREADS];
+
+static void* progress_thread_stats(void *args) 
+{
+    ulong last_throughput = 0;
+    int pipe_id = 0;
+#if REPORT_PIPE
+    // Communicate through unix socket
+    pipe_id = socket(PF_UNIX, SOCK_STREAM, 0);
+    if(pipe_id < 0) {
+      fprintf(stderr, "Unable to create the socket.\n");
+      exit(0);
+    }
+    
+    struct sockaddr_un addr;
+    memset(&addr, 0, sizeof(addr));
+    addr.sun_family = AF_UNIX;
+    strncpy(addr.sun_path, PIPE_NAME, sizeof(addr.sun_path)-1);
+
+    if(connect(pipe_id, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) != 0) {
+      fprintf(stderr, "Unable to connect to the socket.\n");
+      exit(0);
+    }
+#endif
+
+    const char *uniq_name = getenv("LOCKPROFILER_UNIQ_NAME");
+    if (uniq_name == NULL) {
+	uniq_name = "radiosity";
+    }
+    char str[1024];
+    int string_size;
+    int i;
+
+    while (1) {
+	sleep(1);
+	
+	// Get and reset counter atomically
+	last_throughput = 0;
+	for (i = 0; i < max_thread_id; i++) {
+	    last_throughput += throughput[i];
+	    throughput[i] = 0;
+	}
+
+	// Write to the pipe
+	string_size = snprintf(str, 1024, "%s,%llu\n", uniq_name, last_throughput);
+#if REPORT_PIPE
+	write(pipe_id, str, string_size);
+#endif
+	fprintf(stderr, "Last second throughput is %s", str);
+    }    
+
+    return NULL;
+}
+#endif
+
+
 
   /***************************************
    *
@@ -51,10 +117,10 @@
   Global *global;
   Timing **timing;
 
-  long MAX_ELEMENTS = 100000;
-  long MAX_INTERACTIONS = 1000000;
-  long MAX_ELEMVERTICES = 100000;
-  long MAX_EDGES = 100000;
+  long MAX_ELEMENTS = 1000000;
+  long MAX_INTERACTIONS = 10000000;
+  long MAX_ELEMVERTICES = 1000000;
+  long MAX_EDGES = 1000000;
 
   /***************************************
    *
@@ -162,6 +228,11 @@
     long total_wait_time, max_wait_time, min_wait_time;
     long total_vertex_time, max_vertex_time, min_vertex_time;
 
+#ifdef METRIC
+#define MAGIC_NUMBER 0xdeedbeaf
+    pthread_t tid;
+    pthread_create(&tid, NULL, progress_thread_stats, (void*)MAGIC_NUMBER);
+#endif
     /* Parse arguments */
     parse_args(argc, argv) ;
     choices[2].init_value = model_selector ;
@@ -325,7 +396,8 @@
 
             /*	print_fork_time(0) ; */
 
-            print_statistics( stdout, 0 ) ;
+	    // Suppress sequential
+            // print_statistics( stdout, 0 ) ;
         }
     else
         {
@@ -834,6 +906,18 @@
     long process_id;
     long rad_start, refine_done, vertex_start, vertex_done;
 
+#ifdef METRIC
+    if (!thread_init) {
+	current_thread_id = __sync_fetch_and_add(&max_thread_id, 1);
+	if (current_thread_id > MAX_THREADS) {
+	    fprintf(stderr, "More thread than expected. Update MAX_THREADS\n");
+	exit(0);
+	}
+	throughput[current_thread_id] = 0;
+	thread_init = 1;
+    }
+#endif
+
     LOCK(global->index_lock);
     process_id = global->index++;
     UNLOCK(global->index_lock);
@@ -851,6 +935,7 @@
 
     /* Decompose model objects into patches and build the BSP tree */
     /* Create the initial tasks */
+ 
     init_modeling_tasks(process_id) ;
     process_tasks(process_id) ;
 
@@ -990,7 +1075,8 @@
     p->el_root->rad_in.b = 0.0 ;
 
     enqueue_ray_task( (p->seq_no >> 2) % n_taskqueues, p->el_root,
-                     TASK_APPEND, process_id ) ;
+                    
+ TASK_APPEND, process_id ) ;
 }
 
 #if PATCH_ASSIGNMENT == PATCH_ASSIGNMENT_COSTBASED
diff -u a/ext/splash2x/apps/radiosity/src/visible.C b/ext/splash2x/apps/radiosity/src/visible.C
--- a/ext/splash2x/apps/radiosity/src/visible.C
+++ b/ext/splash2x/apps/radiosity/src/visible.C
@@ -56,6 +56,11 @@
 } vis_struct[MAX_PROCESSORS];
 
 
+
+#ifdef METRIC
+extern unsigned long long current_throughput;
+#endif
+
 /*************************************************************
  *
  *	void init_visibility_module()
@@ -642,7 +647,6 @@
  *
  *************************************************************/
 
-
 float visibility(Element *e1, Element *e2, long n_rays, long process_id)
 {
     float range_max, range_min ;
@@ -756,6 +760,11 @@
     new_vis_undef_count = elem->n_vis_undef_inter ;
     UNLOCK(elem->elem_lock->lock);
 
+ 
+#ifdef METRIC
+    throughput[current_thread_id] += 1;
+#endif
+
 #if PATCH_ASSIGNMENT == PATCH_ASSIGNMENT_COSTBASED
     pc = &global->patch_cost[ elem->patch->seq_no ] ;
     LOCK(pc->cost_lock->lock);
