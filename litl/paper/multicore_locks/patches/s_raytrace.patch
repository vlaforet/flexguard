diff -u a/ext/splash2x/apps/raytrace/src/main.C b/ext/splash2x/apps/raytrace/src/main.C
--- a/ext/splash2x/apps/raytrace/src/main.C
+++ b/ext/splash2x/apps/raytrace/src/main.C
@@ -88,6 +88,70 @@
 #include <hooks.h>
 #endif
 
+#ifdef METRIC
+#include <sys/syscall.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <pthread.h>
+
+int max_thread_id = 0;
+__thread int current_thread_id = 0;
+__thread int thread_init = 0;
+ulong throughput[MAX_THREADS];
+
+static void* progress_thread_stats(void *args) 
+{
+    ulong last_throughput = 0;
+    int pipe_id = 0;
+#if REPORT_PIPE
+    // Communicate through unix socket
+    pipe_id = socket(PF_UNIX, SOCK_STREAM, 0);
+    if(pipe_id < 0) {
+      fprintf(stderr, "Unable to create the socket.\n");
+      exit(0);
+    }
+    
+    struct sockaddr_un addr;
+    memset(&addr, 0, sizeof(addr));
+    addr.sun_family = AF_UNIX;
+    strncpy(addr.sun_path, PIPE_NAME, sizeof(addr.sun_path)-1);
+
+    if(connect(pipe_id, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) != 0) {
+      fprintf(stderr, "Unable to connect to the socket.\n");
+      exit(0);
+    }
+#endif
+
+    const char *uniq_name = getenv("LOCKPROFILER_UNIQ_NAME");
+    if (uniq_name == NULL) {
+	uniq_name = "raytrace";
+    }
+    char str[1024];
+    int string_size;
+    int i;
+
+    while (1) {
+	sleep(1);
+	
+	// Get and reset counter atomically
+	last_throughput = 0;
+	for (i = 0; i < max_thread_id; i++) {
+	    last_throughput += throughput[i];
+	    throughput[i] = 0;
+	}
+
+	// Write to the pipe
+	string_size = snprintf(str, 1024, "%s,%llu\n", uniq_name, last_throughput);
+#if REPORT_PIPE
+	write(pipe_id, str, string_size);
+#endif
+	fprintf(stderr, "Last second throughput is %s", str);
+    }    
+
+    return NULL;
+}
+#endif
+
 CHAR	*ProgName     = "RAYTRACE";          /* The program name.                 */
 INT	nprocs	      = 1;		/* The number of processors to use.  */
 INT	MaxGlobMem    = 32;		/* Maximum global memory needed (MB).*/
@@ -187,6 +251,17 @@
 	UINT	end;
 	UINT	lapsed;
 
+#ifdef METRIC
+	if (!thread_init) {
+	  current_thread_id = __sync_fetch_and_add(&max_thread_id, 1);
+	  if (current_thread_id > MAX_THREADS) {
+	    fprintf(stderr, "More thread than expected. Update MAX_THREADS\n");
+	    exit(0);
+	  }
+	  throughput[current_thread_id] = 0;
+	  thread_init = 1;
+	}
+#endif
 
 	LOCK(gm->pidlock)
 	pid = gm->pid++;
@@ -256,6 +331,12 @@
 	CHAR	*pch;
 	MATRIX	vtrans, Vinv;		/*  View transformation and inverse. */
 
+#ifdef METRIC
+#define MAGIC_NUMBER 0xdeedbeaf
+	pthread_t tid;
+	pthread_create(&tid, NULL, progress_thread_stats, (void*)MAGIC_NUMBER);
+#endif
+
 #ifdef ENABLE_PARSEC_HOOKS
         __parsec_bench_begin (__splash2_raytrace);
 #endif
diff -u a/ext/splash2x/apps/raytrace/src/rt.H b/ext/splash2x/apps/raytrace/src/rt.H
--- a/ext/splash2x/apps/raytrace/src/rt.H
+++ b/ext/splash2x/apps/raytrace/src/rt.H
@@ -26,6 +26,10 @@
  *
  */
 
+#define METRIC 1
+#define REPORT_PIPE 0
+#define MAX_THREADS 64
+#define PIPE_NAME                 "/tmp/progress_manual.pipe"
 
 #define huge
 
diff -u a/ext/splash2x/apps/raytrace/src/trace.C b/ext/splash2x/apps/raytrace/src/trace.C
--- a/ext/splash2x/apps/raytrace/src/trace.C
+++ b/ext/splash2x/apps/raytrace/src/trace.C
@@ -220,6 +220,10 @@
  *	Nothing.
  */
 
+
+extern __thread current_thread_id;
+extern ulong throughput[MAX_THREADS];
+
 VOID	RayTrace(pid)
 INT	pid;
 	{
@@ -278,6 +282,10 @@
 
 				if (hit)
 					{
+#ifdef METRIC
+					  throughput[current_thread_id] += 1;
+#endif
+
 					/*
 					 *  Get parent object to be able to access
 					 *  object operations.
