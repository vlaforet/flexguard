--- a/pkgs/kernels/streamcluster/src/streamcluster.cpp
+++ b/pkgs/kernels/streamcluster/src/streamcluster.cpp
@@ -83,6 +83,74 @@
 #endif
 
 
+#include <sys/syscall.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#define METRIC 1
+#define REPORT_PIPE 0
+#define MAX_THREADS 128
+#define PIPE_NAME                 "/tmp/progress_manual.pipe"
+
+#ifdef METRIC
+static int max_thread_id = 0;
+static __thread int current_thread_id = 0;
+static __thread int thread_init = 0;
+static ulong throughput[MAX_THREADS];
+
+static void* progress_thread_stats(void *args) 
+{
+    ulong last_throughput = 0;
+    int pipe_id = 0;
+#if REPORT_PIPE
+    // Communicate through unix socket
+    pipe_id = socket(PF_UNIX, SOCK_STREAM, 0);
+    if(pipe_id < 0) {
+      fprintf(stderr, "Unable to create the socket.\n");
+      exit(0);
+    }
+    
+    struct sockaddr_un addr;
+    memset(&addr, 0, sizeof(addr));
+    addr.sun_family = AF_UNIX;
+    strncpy(addr.sun_path, PIPE_NAME, sizeof(addr.sun_path)-1);
+
+    if(connect(pipe_id, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) != 0) {
+      fprintf(stderr, "Unable to connect to the socket.\n");
+      exit(0);
+    }
+#endif
+
+    const char *uniq_name = getenv("LOCKPROFILER_UNIQ_NAME");
+    if (uniq_name == NULL) {
+	uniq_name = "streamcluster";
+    }
+    char str[1024];
+    int string_size;
+    int i;
+
+    while (1) {
+	sleep(1);
+	
+	// Get and reset counter atomically
+	last_throughput = 0;
+	for (i = 0; i < max_thread_id; i++) {
+	    last_throughput += throughput[i];
+	    throughput[i] = 0;
+	}
+
+	// Write to the pipe
+	string_size = snprintf(str, 1024, "%s,%llu\n", uniq_name, last_throughput);
+#if REPORT_PIPE
+	write(pipe_id, str, string_size);
+#endif
+	fprintf(stderr, "Last second throughput is %s", str);
+    }    
+
+    return NULL;
+}
+#endif
+
+
 float dist(Point p1, Point p2, int dim);
 
 
@@ -1233,6 +1301,9 @@
     for (i=0;i<iter;i++) {
       x = i%numfeasible;
       change += pgain(feasible[x], points, z, k, pid, barrier);
+#ifdef METRIC
+      throughput[current_thread_id] += 1;
+#endif
     }
     cost -= change;
 #ifdef ENABLE_THREADS
@@ -1689,6 +1760,18 @@
 
 void* localSearchSub(void* arg_) {
 
+#ifdef METRIC
+    if (!thread_init) {
+	current_thread_id = __sync_fetch_and_add(&max_thread_id, 1);
+	if (current_thread_id > MAX_THREADS) {
+	    fprintf(stderr, "More thread than expected. Update MAX_THREADS\n");
+	exit(0);
+	}
+	throughput[current_thread_id] = 0;
+	thread_init = 1;
+    }
+#endif
+
   pkmedian_arg_t* arg= (pkmedian_arg_t*)arg_;
   pkmedian(arg->points,arg->kmin,arg->kmax,arg->kfinal,arg->pid,arg->barrier);
 
@@ -2022,6 +2105,11 @@
     stream = new FileStream(infilename);
   }
 
+#ifdef METRIC
+#define MAGIC_NUMBER 0xdeedbeaf
+  pthread_t tid;
+  pthread_create(&tid, NULL, progress_thread_stats, (void*)MAGIC_NUMBER);
+#endif
 
 #ifdef ENABLE_PARSEC_HOOKS
   __parsec_roi_begin();
